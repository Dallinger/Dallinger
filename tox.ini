[tox]
envlist =
     docs,style,tests

[testenv:tests]
extras =
    data
    jupyter
usedevelop=True
commands =
    find . -type f -name "*.py[c|o]" -delete
    pip install -r dev-requirements.txt
    pip install -e .[data,dev,jupyter,docker]
    pip install -e demos
    pip freeze
    coverage run {envbindir}/pytest . demos/ {posargs} --runslow --chrome-headless --prolific --prolific-writes
    coverage combine
    coverage report
    coverage xml
passenv =
    CI
    DATABASE_URL
    POSTGRES_USER
    POSTGRES_PASSWORD
    POSTGRES_DB
    PORT
    HOME
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    AWS_REGION
    PROLIFIC_RESEARCHER_API_TOKEN
    mturk_worker_id
    threads
whitelist_externals =
    find

[testenv:fast]
extras =
    data
    jupyter
deps =
    -r dev-requirements.txt
    -e .
    -e demos
commands =
    {envbindir}/pytest {posargs}
passenv =
    CI
    DATABASE_URL
    POSTGRES_USER
    POSTGRES_PASSWORD
    POSTGRES_DB
    PORT
    HOME
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    AWS_REGION
    mturk_worker_id
    threads

[testenv:mturkfull]
extras =
    data
    jupyter
deps =
    -r dev-requirements.txt
    -e .
    -e demos
commands =
    {envbindir}/pytest {posargs} --mturkfull --runslow
passenv =
    CI
    DATABASE_URL
    POSTGRES_USER
    POSTGRES_PASSWORD
    POSTGRES_DB
    PORT
    HOME
    aws_access_key_id
    aws_secret_access_key
    mturk_worker_id
    threads

[testenv:dockertests]
deps =
    -r dev-requirements.txt
    -e .[data]
setenv =
    RUN_DOCKER = 1
commands =
    {envbindir}/pytest {posargs} -m docker --runslow --chrome-headless -s
passenv =
    CI

[testenv:style]
commands =
    pip install -r dev-requirements.txt
    flake8
    black --check dallinger dallinger_scripts demos tests
deps =
    black
    flake8

[testenv:docs]
whitelist_externals =
    make
    yarn
commands =
    pip install -r dev-requirements.txt
    yarn --ignore-engines
    make -C docs html
